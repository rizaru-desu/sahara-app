generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  userId      String      @id @default(uuid()) @db.VarChar(255)
  fullname    String?     @db.VarChar(255)
  phone       String?     @db.VarChar(50)
  dateOfBirth String?     @db.VarChar(50)
  email       String      @unique @db.VarChar(255)
  password    String      @db.VarChar(255)
  inActive    Boolean     @default(false)
  modifiedBy  String?     @db.VarChar(255)
  createdAt   DateTime    @default(now())
  modifedAt   DateTime    @updatedAt
  createdBy   String?     @default("bySystem") @db.VarChar(255)
  leader      String?     @db.VarChar(255)
  token       AuthToken[]
  roles       Roles[]

  @@index([userId])
}

model Roles {
  roleId     String   @id @default(uuid()) @db.VarChar(255)
  stringId   String   @db.VarChar(255)
  userId     String   @db.VarChar(255)
  value      String?  @db.VarChar(255)
  createdBy  String?  @default("bySystem") @db.VarChar(255)
  modifiedBy String?  @db.VarChar(255)
  createdAt  DateTime @default(now())
  modifedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId])
  @@index([roleId])
}

model AuthToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique @db.VarChar(500)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.VarChar(255)
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId], map: "authToken_userId_fkey")
}

model Agent {
  agentId      String   @id @default(uuid()) @db.VarChar(255)
  createdAt    DateTime @default(now())
  modifedAt    DateTime @updatedAt
  modifiedBy   String?  @db.VarChar(255)
  createdBy    String?  @default("bySystem") @db.VarChar(255)
  alamatToko   String   @db.VarChar(1000)
  customerName String   @unique(map: "customerName") @db.VarChar(255)
  email        String   @db.VarChar(255)
  noNpwp       String?  @db.VarChar(50)
  picName      String   @db.VarChar(255)
  picPhone     String   @db.VarChar(255)

  @@index([agentId])
}

model BoothOwner {
  boothOwnerId       String   @id @default(uuid()) @db.VarChar(255)
  userId             String   @db.VarChar(255)
  fullname           String?  @db.VarChar(255)
  alamatOwner        String?  @db.VarChar(1000)
  phone              String?  @db.VarChar(255)
  email              String?  @db.VarChar(255)
  dateeEstablishment String?  @db.VarChar(255)
  totalBooth         Int?
  instagram          String?  @db.VarChar(255)
  facebook           String?  @db.VarChar(255)
  ecommerce          String?  @db.VarChar(255)
  modifiedBy         String?  @db.VarChar(255)
  createdAt          DateTime @default(now())
  modifedAt          DateTime @updatedAt
  createdBy          String?  @default("bySystem") @db.VarChar(255)
  boothMember        Booth[]

  @@index([boothOwnerId])
}

model Booth {
  boothId      String     @id @default(uuid()) @db.VarChar(255)
  alamatBooth  String     @db.VarChar(1000)
  geolocation  String?    @db.VarChar(255)
  photoBooth   Bytes?
  modifiedBy   String?    @db.VarChar(255)
  createdAt    DateTime   @default(now())
  modifedAt    DateTime   @updatedAt
  createdBy    String?    @default("bySystem") @db.VarChar(255)
  email        String?    @db.VarChar(255)
  fullname     String?    @db.VarChar(255)
  phone        String?    @db.VarChar(255)
  userId       String     @db.VarChar(255)
  boothOwnerId String     @db.VarChar(255)
  boothOwner   BoothOwner @relation(fields: [boothOwnerId], references: [boothOwnerId], onDelete: Cascade)

  @@index([boothId])
  @@index([boothOwnerId])
}

model Product {
  productId         String              @id @default(uuid()) @db.VarChar(255)
  productName       String              @db.VarChar(255)
  weight            Decimal
  price             Decimal
  unit              String              @db.VarChar(255)
  productCode       String              @unique(map: "productCode_UNIQUE") @db.VarChar(255)
  expiredPeriod     Int
  createdAt         DateTime            @default(now())
  modifedAt         DateTime            @updatedAt
  modifiedBy        String?             @db.VarChar(255)
  createdBy         String?             @default("bySystem") @db.VarChar(255)

  @@index([productId])
}

model StringMap {
  stringId   String   @id @default(uuid()) @db.VarChar(255)
  objectName String?  @db.VarChar(255)
  key        Int?
  value      String?  @db.VarChar(255)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  modifiedBy String?  @db.VarChar(255)
  createdBy  String?  @default("bySystem") @db.VarChar(255)

  @@index([stringId])
}
