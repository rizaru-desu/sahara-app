generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  userId      String      @id @default(uuid()) @db.VarChar(255)
  fullname    String?     @db.VarChar(255)
  phone       String?     @db.VarChar(50)
  dateOfBirth String?     @db.VarChar(50)
  email       String      @unique @db.VarChar(255)
  password    String      @db.VarChar(255)
  inActive    Boolean     @default(false)
  modifiedBy  String?     @db.VarChar(255)
  createdAt   DateTime    @default(now())
  modifedAt   DateTime    @updatedAt
  createdBy   String      @default("bySystem") @db.VarChar(255)
  leader      String?     @db.VarChar(255)
  token       AuthToken[]
  roles       Roles[]
  loyaltyPoint  LoyaltyPoint[]

  @@index([userId])
}

model Roles {
  roleId     String   @id @default(uuid()) @db.VarChar(255)
  stringId   String   @db.VarChar(255)
  userId     String   @db.VarChar(255)
  value      String?  @db.VarChar(255)
  createdBy  String   @default("bySystem") @db.VarChar(255)
  modifiedBy String?  @db.VarChar(255)
  createdAt  DateTime @default(now())
  modifedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId])
  @@index([roleId])
}

model AuthToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique @db.VarChar(500)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.VarChar(255)
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId], map: "authToken_userId_fkey")
}

model Agent {
  agentId      String   @id @default(uuid()) @db.VarChar(255)
  createdAt    DateTime @default(now())
  modifedAt    DateTime @updatedAt
  modifiedBy   String?  @db.VarChar(255)
  createdBy    String   @default("bySystem") @db.VarChar(255)
  alamatToko   String   @db.VarChar(1000)
  customerName String   @unique(map: "customerName") @db.VarChar(255)
  email        String   @db.VarChar(255)
  noNpwp       String?  @db.VarChar(50)
  picName      String   @db.VarChar(255)
  picPhone     String   @db.VarChar(255)

  @@index([agentId])
}

model BoothOwner {
  boothOwnerId      String   @id @default(uuid()) @db.VarChar(255)
  userId            String   @db.VarChar(255)
  fullname          String?  @db.VarChar(255)
  alamatOwner       String?  @db.VarChar(1000)
  phone             String?  @db.VarChar(255)
  email             String?  @db.VarChar(255)
  dateEstablishment String?  @db.VarChar(255)
  totalBooth        Int?
  instagram         String?  @db.VarChar(255)
  facebook          String?  @db.VarChar(255)
  ecommerce         String?  @db.VarChar(255)
  modifiedBy        String?  @db.VarChar(255)
  createdAt         DateTime @default(now())
  modifedAt         DateTime @updatedAt
  createdBy         String   @default("bySystem") @db.VarChar(255)
  boothMember       Booth[]

  @@index([boothOwnerId])
}

model Booth {
  boothId      String     @id @default(uuid()) @db.VarChar(255)
  alamatBooth  String     @db.VarChar(1000)
  geolocation  String?    @db.VarChar(255)
  photoBooth   Bytes?
  modifiedBy   String?    @db.VarChar(255)
  createdAt    DateTime   @default(now())
  modifedAt    DateTime   @updatedAt
  createdBy    String     @default("bySystem") @db.VarChar(255)
  email        String?    @db.VarChar(255)
  fullname     String?    @db.VarChar(255)
  phone        String?    @db.VarChar(255)
  userId       String     @db.VarChar(255)
  boothOwnerId String     @db.VarChar(255)
  boothOwner   BoothOwner @relation(fields: [boothOwnerId], references: [boothOwnerId], onDelete: Cascade)

  @@index([boothId])
  @@index([boothOwnerId])
}

model Product {
  productId     String   @id @default(uuid()) @db.VarChar(255)
  productName   String   @db.VarChar(255)
  weight        Decimal
  unit          String   @db.VarChar(255)
  productCode   String   @unique(map: "productCode_UNIQUE") @db.VarChar(255)
  expiredPeriod Int
  createdAt     DateTime @default(now())
  modifedAt     DateTime @updatedAt
  campaignId    String?   @db.VarChar(255)
  modifiedBy    String?  @db.VarChar(255)
  createdBy     String   @default("bySystem") @db.VarChar(255)
  campaign      Campaign? @relation(fields: [campaignId], references: [campaignId], onDelete: Cascade)
  stockProduct  StokPorudct[]

  @@index([productId])
  @@index([campaignId])
}

model LabelProduct {
  labelId     String    @id @default(uuid()) @db.VarChar(255)
  productId   String    @db.VarChar(255)
  productCode String    @db.VarChar(255)
  labelCode   String    @db.VarChar(255)
  shift       Int       
  batch       String    @db.VarChar(255)
  bestBefore  DateTime
  createdAt   DateTime  @default(now())
  modifedAt   DateTime  @updatedAt
  modifiedBy  String?   @db.VarChar(255)
  createdBy   String    @default("bySystem") @db.VarChar(255)
  printed     Int       @default(0)
  labelBoxId  String?   @db.VarChar(255)
  stockProduct StokPorudct[]
  labelBox    LabelBox? @relation(fields: [labelBoxId], references: [labelBoxId], onDelete: Restrict)
  
  
  @@index([labelId])
  @@index([labelBoxId])
}

model LabelBox {
  labelBoxId   String         @id @default(uuid()) @db.VarChar(255)
  labelCodeBox String         @db.VarChar(255)
  leader       String         @db.VarChar(255)
  createdAt    DateTime       @default(now())
  modifedAt    DateTime       @updatedAt
  modifiedBy   String?        @db.VarChar(255)
  createdBy    String         @default("bySystem") @db.VarChar(255)
  statusBox    Int            @default(0)
  labelProduct LabelProduct[]
  stockProduct StokPorudct[]

  @@index([labelBoxId])
}

model StokPorudct {
  stockId       String    @id @default(uuid()) @db.VarChar(255)
  productId     String    @db.VarChar(255)
  productName   String    @db.VarChar(255)
  productCode   String    @db.VarChar(255)
  weight        Decimal
  unit          String    @db.VarChar(255)  
  expiredDate   DateTime
  labelProducts String    @db.VarChar(255)
  labelId       String    @db.VarChar(255)
  labelBoxs     String?   @db.VarChar(255)
  labelBoxId    String?   @db.VarChar(255)
  status        Int       @default(1)
  location      String?    @db.VarChar(5)
  createdAt     DateTime  @default(now())
  modifedAt     DateTime  @updatedAt
  modifiedBy    String?   @db.VarChar(255)
  createdBy     String    @default("bySystem") @db.VarChar(255)
  labelBox      LabelBox? @relation(fields: [labelBoxId], references: [labelBoxId], onDelete: Restrict)
  labelProduct  LabelProduct? @relation(fields: [labelId], references: [labelId], onDelete: Restrict)
  product       Product? @relation(fields: [productId], references: [productId], onDelete: Restrict)

  @@index([stockId])
  @@index([labelBoxId])
  @@index([productId])
  @@index([labelId])
}

model LoyaltyPoint {
  pointId       String    @id @default(uuid()) @db.VarChar(255)
  userId        String   @db.VarChar(255)
  loyaltyPoint  Int @default(0)
  createdAt     DateTime  @default(now())
  modifedAt     DateTime  @updatedAt
  modifiedBy    String?   @db.VarChar(255)
  createdBy     String    @default("bySystem") @db.VarChar(255)
  userIdData    User? @relation(fields: [userId], references: [userId], onDelete: Restrict)
  log           LoyaltyPointLog[]


  @@index([userId])
  @@index([pointId])
}

model LoyaltyPointLog {
  pointLogId String    @id @default(uuid()) @db.VarChar(255)
  pointId String   @db.VarChar(255)
  userId  String   @db.VarChar(255)
  loyaltyPoint  String 
  remark  String?   @db.VarChar(500)
  productId String?   @db.VarChar(255)
  productName String?   @db.VarChar(255)
  productCode String?   @db.VarChar(255)
  labelId String?   @db.VarChar(255)
  labelProducts String?   @db.VarChar(255)
  scanDate  DateTime?  
  campaignId  String?   @db.VarChar(255)
  createdAt     DateTime  @default(now())
  modifedAt     DateTime  @updatedAt
  modifiedBy    String?   @db.VarChar(255)
  createdBy     String    @default("bySystem") @db.VarChar(255)
  loyalty       LoyaltyPoint? @relation(fields: [pointId], references: [pointId], onDelete: Restrict)

  @@index([pointLogId])
  @@index([pointId])
}

model BaseLoyalty {
  baseLoyaltyId String    @id @default(uuid()) @db.VarChar(255)
  basePoint Int
  createdAt     DateTime  @default(now())
  modifedAt     DateTime  @updatedAt
  modifiedBy    String?   @db.VarChar(255)
  createdBy     String    @default("bySystem") @db.VarChar(255)

  @@index([baseLoyaltyId])
}

model Campaign {
  campaignId String    @id @default(uuid()) @db.VarChar(255)
  campaignName  String   @db.VarChar(255)
  startDate DateTime
  endDate DateTime
  loyaltyPoint Int
  description String   @db.VarChar(255)
  photo Bytes
  inActive    Boolean @default(false)
  createdAt     DateTime  @default(now())
  modifedAt     DateTime  @updatedAt
  modifiedBy    String?   @db.VarChar(255)
  createdBy     String    @default("bySystem") @db.VarChar(255)
  product       Product[]


  @@index([campaignId])
}

model SuratJalan {
  suratJalanId String    @id @default(uuid()) @db.VarChar(255)
  noSurat  String   @db.VarChar(255)
  OrderNo String   @db.VarChar(255)
  ShippingDate DateTime
  agentId String   @db.VarChar(255)
  deliveryAddress String   @db.VarChar(500)
  totalWeight Int   
  deliveryNote String   @db.VarChar(255)
  status Int
  recaiveDate DateTime
  recaiveBy String   @db.VarChar(255)
  recaiveNote String   @db.VarChar(255)
  createdAt     DateTime  @default(now())
  modifedAt     DateTime  @updatedAt
  modifiedBy    String?   @db.VarChar(255)
  createdBy     String    @default("bySystem") @db.VarChar(255)

  @@index([suratJalanId])
}

model StringMap {
  stringId   String   @id @default(uuid()) @db.VarChar(255)
  objectName String?  @db.VarChar(255)
  key        Int?
  value      String?  @db.VarChar(255)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  modifiedBy String?  @db.VarChar(255)
  createdBy  String   @default("bySystem") @db.VarChar(255)

  @@index([stringId])
}
